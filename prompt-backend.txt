Genera el backend completo de un sistema inform√°tico llamado ‚ÄúEstaci√≥n Mazariegos‚Äù, desarrollado en Java con Spring Boot y PostgreSQL.

üéØ OBJETIVO GENERAL:
El sistema debe informatizar la gesti√≥n de una gasolinera familiar llamada ‚ÄúEstaci√≥n Mazariegos‚Äù, que se dedica exclusivamente a la venta de combustibles (di√©sel, gasolina regular y gasolina s√∫per) y productos complementarios (aceites, lubricantes, aditivos, etc.). 
El prop√≥sito principal es automatizar el control de inventario, el registro de ventas de combustible y productos, la conciliaci√≥n de tanques y la generaci√≥n de reportes financieros b√°sicos, sustituyendo los procesos manuales actuales.

---

## üß© M√ìDULOS Y FUNCIONALIDADES

### 1. üîë GESTI√ìN DE USUARIOS
**Actores:** Administrador, Despachador.

**Casos de uso:**
- **CU01 ‚Äì Iniciar sesi√≥n en el sistema:** Los usuarios (Administrador o Despachador) pueden autenticarse mediante credenciales. Se debe implementar autenticaci√≥n JWT.
- **CU02 ‚Äì Administrar usuarios:** El Administrador puede registrar, editar o eliminar usuarios. Los roles definen los permisos:
  - **Administrador:** acceso total al sistema.
  - **Despachador:** acceso limitado al m√≥dulo de bombas, ventas diarias y consultas b√°sicas.

**Requerimientos funcionales:**
- RF01: El sistema debe permitir el inicio de sesi√≥n mediante usuario y contrase√±a.
- RF02: El Administrador puede realizar CRUD de usuarios.
- RF03: El sistema debe proteger todos los endpoints con autenticaci√≥n JWT (excepto /auth/login).

---

### 2. üì¶ M√ìDULO DE INVENTARIO (PRODUCTOS)
**Actores:** Administrador, Despachador (consulta).

**Casos de uso:**
- **CU03 ‚Äì Registrar entrada de productos:** El Administrador ingresa nuevas existencias de lubricantes, aceites u otros productos con cantidad y unidad de medida.
- **CU04 ‚Äì Registrar salida de productos:** Registra las salidas por ventas o consumo interno.
- **CU05 ‚Äì Consultar existencias:** Permite conocer el stock actual de cada producto.
- **CU06 ‚Äì Generar alerta de stock bajo:** El sistema emite una alerta autom√°tica cuando el nivel de stock llega al umbral m√≠nimo.

**Requerimientos funcionales:**
- RF04: Registrar entradas y salidas de productos con fecha, cantidad y responsable.
- RF05: Consultar inventario en tiempo real.
- RF06: Generar alertas autom√°ticas de stock bajo.
- RF07: Mantener consistencia entre movimientos y cantidades disponibles.

---

### 3. ‚õΩ M√ìDULO DE TANQUES Y BOMBAS (COMBUSTIBLES)
**Actores:** Administrador, Despachador.

**Casos de uso:**
- **CU07 ‚Äì Registrar carga de combustible en tanques:** El Administrador o Despachador registra las cargas recibidas por cisternas.
- **CU08 ‚Äì Registrar despacho de combustible:** El Despachador registra los litros despachados por cada bomba.
- **CU09 ‚Äì Conciliar combustible en tanque:** El sistema compara litros recibidos, vendidos y almacenados para detectar p√©rdidas o mermas.
- **CU10 ‚Äì Consultar nivel de combustible en tanques:** Permite conocer en tiempo real los niveles actuales de gasolina y di√©sel.

**Requerimientos funcionales:**
- RF08: Registrar carga de combustible con fecha, cantidad, tipo y tanque.
- RF09: Registrar despacho de combustible por bomba y turno.
- RF10: Calcular autom√°ticamente diferencias entre litros recibidos, vendidos y disponibles.
- RF11: Permitir al Administrador visualizar el estado de cada tanque.

---

### 4. üí∞ M√ìDULO DE REPORTES FINANCIEROS
**Actores:** Administrador.

**Casos de uso:**
- **CU11 ‚Äì Registrar ventas diarias:** El Administrador o Despachador puede registrar el total de ventas diarias de combustibles y productos.
- **CU12 ‚Äì Generar reporte de ventas:** Permite generar reportes diarios, semanales o mensuales por tipo de combustible o producto.
- **CU13 ‚Äì Generar reporte de costos y utilidad:** El sistema muestra los ingresos, costos y m√°rgenes de utilidad.

**Requerimientos funcionales:**
- RF12: Registrar ventas totales por d√≠a, combustible y producto.
- RF13: Generar reportes de ventas filtrables por rango de fechas.
- RF14: Calcular utilidad bruta (ingresos - costos).
- RF15: Consolidar datos de inventario y tanques para generar reportes financieros.

---

### 5. üßæ FUNCIONALIDADES TRANSVERSALES
**Casos de uso:**
- **CU14 ‚Äì Generar respaldos de datos:** El Administrador puede generar copias de seguridad de la base de datos.
- **CU15 ‚Äì Consultar historial de operaciones:** El sistema registra en una bit√°cora todas las acciones realizadas (altas, bajas, movimientos, etc.).

**Requerimientos funcionales:**
- RF16: Guardar autom√°ticamente un registro de todas las operaciones (usuario, fecha, m√≥dulo, acci√≥n).
- RF17: Permitir la exportaci√≥n o respaldo de datos cr√≠ticos.

---

## ‚öôÔ∏è REQUERIMIENTOS NO FUNCIONALES

**Seguridad:**
- RNF01: Autenticaci√≥n JWT.
- RNF02: Control de acceso por roles.
- RNF03: Todos los endpoints protegidos excepto /auth/login.

**Usabilidad:**
- RNF04: API REST clara y consistente.
- RNF05: Mensajes de error y √©xito claros.

**Rendimiento:**
- RNF06: Consultas y registros deben responder en menos de 2 segundos.
- RNF07: Operaciones transaccionales deben garantizar integridad.

**Escalabilidad:**
- RNF08: Dise√±o modular y documentado.
- RNF09: Permitir futura integraci√≥n con POS y facturaci√≥n electr√≥nica.

**Mantenibilidad:**
- RNF10: C√≥digo documentado, siguiendo principios SOLID.

**Portabilidad:**
- RNF11: Compatible con Windows y Linux.

---

## üß† ASPECTOS T√âCNICOS

**Lenguaje:** Java 17+  
**Framework:** Spring Boot 3+  
**Base de Datos:** PostgreSQL  
**ORM:** JPA / Hibernate  
**Seguridad:** Spring Security + JWT  
**Validaciones:** jakarta.validation  
**Documentaci√≥n:** Swagger / OpenAPI  
**Pruebas:** Postman (JSON)  
**Gestor de dependencias:** Maven

**Arquitectura sugerida:**
controller/
service/
repository/
model/
dto/
security/
config/


---

## üíæ BASE DE DATOS Y ENTIDADES PRINCIPALES

- `Usuario(id, nombre, correo, contrase√±a, rol)`
- `Producto(id, nombre, tipo, unidadMedida, cantidadActual, stockMinimo, precioUnitario)`
- `MovimientoInventario(id, tipoMovimiento, cantidad, fecha, producto_id, usuario_id)`
- `Tanque(id, tipoCombustible, capacidad, nivelActual)`
- `Bomba(id, numero, tipoCombustible, totalDespachado, tanque_id)`
- `RegistroCombustible(id, tipoOperacion, litros, fecha, bomba_id, tanque_id, usuario_id)`
- `VentaDiaria(id, fecha, totalCombustibles, totalProductos, totalGeneral, usuario_id)`
- `Bitacora(id, fecha, usuario_id, modulo, accion, descripcion)`

---

## üöÄ OBJETIVO FINAL

Generar autom√°ticamente:
- Entidades, DTOs, Repositorios, Servicios y Controladores REST.
- Seguridad JWT (login + roles).
- Endpoints CRUD funcionales.
- Reportes financieros y de inventario.
- Bit√°cora y respaldo b√°sico de datos.
- Documentaci√≥n Swagger.

El backend debe ejecutarse correctamente con:

mvn spring-boot:run


Y debe ser completamente comprobable desde Postman usando endpoints REST funcionales protegidos por JWT.

Gemini puede modificar, reestructurar o sobrescribir las clases existentes si es necesario para lograr una API funcional y coherente.